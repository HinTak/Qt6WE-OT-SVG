From 0e2d491b388a0651c54d2505e57fd61e7d6454d0 Mon Sep 17 00:00:00 2001
From: Shawn Rutledge <shawn.rutledge@qt.io>
Date: Tue, 21 May 2024 22:15:57 -0700
Subject: [PATCH] Teach QQuickPdfPageImage to use double-buffering

This was urgent due to the error: no member named 'pix' in
'QQuickPdfPageImagePrivate'. But we actually need the
double-buffering feature that was added in qtdeclarative
change e0e0f722b86db7b99185ccd669dd5456623e7e69.
Now a single-page viewer will not show a blank page while
"flipping" to another page in a PDF file.

Fixes: QTBUG-125415
Task-number: QTBUG-66713
Change-Id: Ia37682acf0818cfa55acecf668551467780fb0ae
Reviewed-by: Michal Klocek <michal.klocek@qt.io>
---
 src/pdfquick/qquickpdfpageimage.cpp | 16 +++++++++-------
 tests/manual/quick/pdf/withdoc.qml  |  6 ++++++
 2 files changed, 15 insertions(+), 7 deletions(-)

diff --git a/src/pdfquick/qquickpdfpageimage.cpp b/src/pdfquick/qquickpdfpageimage.cpp
index f2da067f1b5..9ff0337a5d1 100644
--- a/src/pdfquick/qquickpdfpageimage.cpp
+++ b/src/pdfquick/qquickpdfpageimage.cpp
@@ -42,7 +42,7 @@ QQuickPdfPageImage::~QQuickPdfPageImage()
 {
     Q_D(QQuickPdfPageImage);
     // cancel any async rendering job that is running on my behalf
-    d->pix.clear();
+    d->pendingPix->clear();
 }
 
 /*!
@@ -97,21 +97,23 @@ void QQuickPdfPageImage::load()
         thisRequestFinished =
             QQuickImageBase::staticMetaObject.indexOfSlot("requestFinished()");
     }
+    static QMetaMethod requestFinishedSlot = staticMetaObject.method(thisRequestFinished);
 
-    d->pix.loadImageFromDevice(qmlEngine(this), carrierFile, url,
+    d->pendingPix->loadImageFromDevice(qmlEngine(this), carrierFile, url,
                                d->sourceClipRect.toRect(), d->sourcesize * d->devicePixelRatio,
                                QQuickImageProviderOptions(), d->currentFrame, d->frameCount);
 
     qCDebug(qLcImg) << "loading page" << d->currentFrame << "of" << d->frameCount
-                    << "from" << carrierFile->fileName() << "status" << d->pix.status();
+                    << "from" << carrierFile->fileName() << "status" << d->pendingPix->status();
 
-    switch (d->pix.status()) {
+    switch (d->pendingPix->status()) {
     case QQuickPixmap::Ready:
+        requestFinishedSlot.invoke(this);
         pixmapChange();
         break;
     case QQuickPixmap::Loading:
-        d->pix.connectFinished(this, thisRequestFinished);
-        d->pix.connectDownloadProgress(this, thisRequestProgress);
+        d->pendingPix->connectFinished(this, thisRequestFinished);
+        d->pendingPix->connectDownloadProgress(this, thisRequestProgress);
         if (d->progress != 0.0) {
             d->progress = 0.0;
             emit progressChanged(d->progress);
@@ -122,7 +124,7 @@ void QQuickPdfPageImage::load()
         }
         break;
     default:
-        qCDebug(qLcImg) << "unexpected status" << d->pix.status();
+        qCDebug(qLcImg) << "unexpected status" << d->pendingPix->status();
         break;
     }
 }
diff --git a/tests/manual/quick/pdf/withdoc.qml b/tests/manual/quick/pdf/withdoc.qml
index d4bf12e29cc..0a2a8663087 100644
--- a/tests/manual/quick/pdf/withdoc.qml
+++ b/tests/manual/quick/pdf/withdoc.qml
@@ -19,6 +19,11 @@ Window {
         onPasswordRequired: function() { passwordDialog.open() }
     }
 
+    Component.onCompleted: {
+        if (Application.arguments.length > 2)
+            doc.source = Application.arguments[Application.arguments.length - 1]
+    }
+
     FileDialog {
         id: fileDialog
         title: "Open a PDF file"
@@ -85,6 +90,7 @@ Window {
                 PdfPageImage {
                     id: image
                     document: doc
+                    retainWhileLoading: true
 
                     property real zoomFactor: Math.sqrt(2)
 
