diff --git a/chromium/skia/BUILD.gn b/chromium/skia/BUILD.gn
index 4bdb828..899a761 100644
--- a/src/3rdparty/chromium/skia/BUILD.gn
+++ b/src/3rdparty/chromium/skia/BUILD.gn
@@ -359,9 +359,6 @@ component("skia") {
     deps += [ "//third_party/wuffs" ]
   }
 
-  # Remove unused util sources.
-  sources -= [ "//third_party/skia/src/utils/SkParsePath.cpp" ]
-
   if (is_win) {
     libs = [ "fontsub.lib" ]
   }
@@ -597,6 +594,17 @@ component("skia") {
     sources += skia_sksg_sources
     sources += skia_shaper_primitive_sources
   }
+  import("//third_party/skia/modules/svg/svg.gni")
+  sources += skia_svg_sources
+  # partial inclusion of the xml option:
+  #     public_defines = SK_XML does nothing
+  #     skia_use_expat is already done
+  #     not needing "src/svg/SkSVGCanvas.cpp", "src/svg/SkSVGDevice.cpp"
+  sources += [
+    "//third_party/skia/src/xml/SkDOM.cpp",
+    "//third_party/skia/src/xml/SkXMLParser.cpp",
+    "//third_party/skia/src/xml/SkXMLWriter.cpp",
+  ]
 }
 
 # Template for things that are logically part of :skia, but need to be split out
diff --git a/chromium/skia/ext/fontmgr_default_linux.cc b/chromium/skia/ext/fontmgr_default_linux.cc
index 76927e7..ed18f0f 100644
--- a/src/3rdparty/chromium/skia/ext/fontmgr_default_linux.cc
+++ b/src/3rdparty/chromium/skia/ext/fontmgr_default_linux.cc
@@ -7,10 +7,13 @@
 #include "third_party/skia/include/core/SkFontMgr.h"
 #include "third_party/skia/include/ports/SkFontConfigInterface.h"
 #include "third_party/skia/include/ports/SkFontMgr_FontConfigInterface.h"
+#include "third_party/skia/include/core/SkGraphics.h"
+#include "third_party/skia/modules/svg/include/SkSVGOpenTypeSVGDecoder.h"
 
 namespace skia {
 
 SK_API sk_sp<SkFontMgr> CreateDefaultSkFontMgr() {
+  SkGraphics::SetOpenTypeSVGDecoderFactory(SkSVGOpenTypeSVGDecoder::Make);
   sk_sp<SkFontConfigInterface> fci(SkFontConfigInterface::RefGlobal());
   return fci ? SkFontMgr_New_FCI(std::move(fci)) : nullptr;
 }
diff --git a/chromium/third_party/blink/renderer/platform/fonts/web_font_decoder.cc b/chromium/third_party/blink/renderer/platform/fonts/web_font_decoder.cc
index 7a9b5855..a87ddc98 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/platform/fonts/web_font_decoder.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/platform/fonts/web_font_decoder.cc
@@ -104,6 +104,7 @@ ots::TableAction BlinkOTSContext::GetTableAction(uint32_t tag) {
   const uint32_t kCpalTag = OTS_TAG('C', 'P', 'A', 'L');
   const uint32_t kCff2Tag = OTS_TAG('C', 'F', 'F', '2');
   const uint32_t kSbixTag = OTS_TAG('s', 'b', 'i', 'x');
+  const uint32_t kSvg_Tag = OTS_TAG('S', 'V', 'G', ' ');
 #if HB_VERSION_ATLEAST(1, 0, 0)
   const uint32_t kGdefTag = OTS_TAG('G', 'D', 'E', 'F');
   const uint32_t kGposTag = OTS_TAG('G', 'P', 'O', 'S');
@@ -130,6 +131,7 @@ ots::TableAction BlinkOTSContext::GetTableAction(uint32_t tag) {
     case kCpalTag:
     case kCff2Tag:
     case kSbixTag:
+    case kSvg_Tag:
 #if HB_VERSION_ATLEAST(1, 0, 0)
     // Let HarfBuzz handle how to deal with broken tables.
     case kAvarTag:
diff --git a/chromium/third_party/ots/src/src/ots.cc b/chromium/third_party/ots/src/src/ots.cc
index 5d1e07a9..b1529e8b 100644
--- a/src/3rdparty/chromium/third_party/ots/src/src/ots.cc
+++ b/src/3rdparty/chromium/third_party/ots/src/src/ots.cc
@@ -757,6 +757,7 @@ bool ProcessGeneric(ots::FontFile *header,
              font->GetTable(OTS_TAG('C','B','L','C'))) {
       // We don't sanitize bitmap tables, but donâ€™t reject bitmap-only fonts if
       // we are asked to pass them thru.
+  } else if (font->GetTable(OTS_TAG('S','V','G',' '))) {
   } else {
       return OTS_FAILURE_MSG_HDR("no supported glyph data table(s) present");
   }
diff --git a/chromium/third_party/skia/src/ports/SkScalerContext_win_dw.cpp b/chromium/third_party/skia/src/ports/SkScalerContext_win_dw.cpp
index d88757a0..344ff8b1 100644
--- a/src/3rdparty/chromium/third_party/skia/src/ports/SkScalerContext_win_dw.cpp
+++ b/src/3rdparty/chromium/third_party/skia/src/ports/SkScalerContext_win_dw.cpp
@@ -43,6 +43,8 @@
 #include "src/utils/win/SkHRESULT.h"
 #include "src/utils/win/SkTScopedComPtr.h"
 
+#include "modules/svg/include/SkSVGOpenTypeSVGDecoder.h"
+
 #include <dwrite.h>
 #include <dwrite_1.h>
 #include <dwrite_3.h>
@@ -1225,6 +1227,8 @@ bool SkScalerContext_DW::drawSVGGlyphImage(const SkGlyph& glyph, SkCanvas& canva
     SkASSERT(isSVGGlyph(glyph));
     SkASSERT(this->getDWriteTypeface()->fDWriteFontFace4);
 
+    if (!SkGraphics::GetOpenTypeSVGDecoderFactory())
+        SkGraphics::SetOpenTypeSVGDecoderFactory(SkSVGOpenTypeSVGDecoder::Make);
     SkGraphics::OpenTypeSVGDecoderFactory svgFactory = SkGraphics::GetOpenTypeSVGDecoderFactory();
     if (!svgFactory) {
         return false;
