From 82dd31016d92df02a9d2c095eecc305284fb7123 Mon Sep 17 00:00:00 2001
From: Hin-Tak Leung <htl10@users.sourceforge.net>
Date: Sun, 24 Dec 2023 00:22:06 +0000
Subject: [PATCH 1/2] m118-OT-SVG-hook

Signed-off-by: Hin-Tak Leung <htl10@users.sourceforge.net>
---
 src/3rdparty/chromium/skia/BUILD.gn                | 14 +++++++++++---
 .../chromium/skia/ext/fontmgr_default_linux.cc     |  3 +++
 .../renderer/platform/fonts/web_font_decoder.cc    |  2 ++
 .../chromium/third_party/ots/src/src/ots.cc        |  1 +
 .../skia/src/ports/SkFontHost_FreeType.cpp         |  6 ++++++
 .../skia/src/ports/SkScalerContext_win_dw.cpp      |  4 ++++
 6 files changed, 27 insertions(+), 3 deletions(-)

diff --git a/src/3rdparty/chromium/skia/BUILD.gn b/src/3rdparty/chromium/skia/BUILD.gn
index bedc83f2..2d84bcff 100644
--- a/src/3rdparty/chromium/skia/BUILD.gn
+++ b/src/3rdparty/chromium/skia/BUILD.gn
@@ -418,9 +418,6 @@ component("skia") {
     defines += [ "SK_CODEC_DECODES_JPEG_GAINMAPS" ]
   }
 
-  # Remove unused util sources.
-  sources -= [ "//third_party/skia/src/utils/SkParsePath.cpp" ]
-
   if (is_win) {
     libs = [ "fontsub.lib" ]
   }
@@ -656,6 +653,8 @@ component("skia") {
     sources += skia_sksg_sources
     sources += skia_shaper_primitive_sources
   }
+  import("//third_party/skia/modules/svg/svg.gni")
+  sources += skia_svg_sources
 }
 
 # Template for things that are logically part of :skia, but need to be split out
diff --git a/src/3rdparty/chromium/skia/ext/fontmgr_default_linux.cc b/src/3rdparty/chromium/skia/ext/fontmgr_default_linux.cc
index 76927e7f..ed18f0f8 100644
--- a/src/3rdparty/chromium/skia/ext/fontmgr_default_linux.cc
+++ b/src/3rdparty/chromium/skia/ext/fontmgr_default_linux.cc
@@ -7,10 +7,13 @@
 #include "third_party/skia/include/core/SkFontMgr.h"
 #include "third_party/skia/include/ports/SkFontConfigInterface.h"
 #include "third_party/skia/include/ports/SkFontMgr_FontConfigInterface.h"
+#include "third_party/skia/include/core/SkGraphics.h"
+#include "third_party/skia/modules/svg/include/SkSVGOpenTypeSVGDecoder.h"
 
 namespace skia {
 
 SK_API sk_sp<SkFontMgr> CreateDefaultSkFontMgr() {
+  SkGraphics::SetOpenTypeSVGDecoderFactory(SkSVGOpenTypeSVGDecoder::Make);
   sk_sp<SkFontConfigInterface> fci(SkFontConfigInterface::RefGlobal());
   return fci ? SkFontMgr_New_FCI(std::move(fci)) : nullptr;
 }
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/platform/fonts/web_font_decoder.cc b/src/3rdparty/chromium/third_party/blink/renderer/platform/fonts/web_font_decoder.cc
index 1ac9b8c..7b03e93 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/platform/fonts/web_font_decoder.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/platform/fonts/web_font_decoder.cc
@@ -105,6 +105,7 @@ ots::TableAction BlinkOTSContext::GetTableAction(uint32_t tag) {
   const uint32_t kCff2Tag = OTS_TAG('C', 'F', 'F', '2');
   const uint32_t kSbixTag = OTS_TAG('s', 'b', 'i', 'x');
   const uint32_t kStatTag = OTS_TAG('S', 'T', 'A', 'T');
+  const uint32_t kSvg_Tag = OTS_TAG('S', 'V', 'G', ' ');
 #if HB_VERSION_ATLEAST(1, 0, 0)
   const uint32_t kBaseTag = OTS_TAG('B', 'A', 'S', 'E');
   const uint32_t kGdefTag = OTS_TAG('G', 'D', 'E', 'F');
@@ -133,6 +134,7 @@ ots::TableAction BlinkOTSContext::GetTableAction(uint32_t tag) {
     case kCff2Tag:
     case kSbixTag:
     case kStatTag:
+    case kSvg_Tag:
 #if HB_VERSION_ATLEAST(1, 0, 0)
     // Let HarfBuzz handle how to deal with broken tables.
     case kAvarTag:
diff --git a/src/3rdparty/chromium/third_party/ots/src/src/ots.cc b/src/3rdparty/chromium/third_party/ots/src/src/ots.cc
index 5d1e07a9..b1529e8b 100644
--- a/src/3rdparty/chromium/third_party/ots/src/src/ots.cc
+++ b/src/3rdparty/chromium/third_party/ots/src/src/ots.cc
@@ -757,6 +757,7 @@ bool ProcessGeneric(ots::FontFile *header,
              font->GetTable(OTS_TAG('C','B','L','C'))) {
       // We don't sanitize bitmap tables, but donâ€™t reject bitmap-only fonts if
       // we are asked to pass them thru.
+  } else if (font->GetTable(OTS_TAG('S','V','G',' '))) {
   } else {
       return OTS_FAILURE_MSG_HDR("no supported glyph data table(s) present");
   }
diff --git a/src/3rdparty/chromium/third_party/skia/src/ports/SkFontHost_FreeType.cpp b/src/3rdparty/chromium/third_party/skia/src/ports/SkFontHost_FreeType.cpp
index 88b117d7..edbbbb19 100644
--- a/src/3rdparty/chromium/third_party/skia/src/ports/SkFontHost_FreeType.cpp
+++ b/src/3rdparty/chromium/third_party/skia/src/ports/SkFontHost_FreeType.cpp
@@ -60,6 +60,8 @@
 #include <freetype/t1tables.h>
 #include <freetype/ftfntfmt.h>
 
+#include "modules/svg/include/SkSVGOpenTypeSVGDecoder.h"
+
 using namespace skia_private;
 
 namespace {
@@ -997,9 +999,13 @@ SkScalerContext_FreeType::SkScalerContext_FreeType(sk_sp<SkTypeface_FreeType> ty
         // FT_LOAD_COLOR with scalable fonts means allow SVG.
         // It also implies attempt to render COLR if available, but this is not used.
 #if defined(FT_CONFIG_OPTION_SVG)
+        if (!SkGraphics::GetOpenTypeSVGDecoderFactory())
+            SkGraphics::SetOpenTypeSVGDecoderFactory(SkSVGOpenTypeSVGDecoder::Make);
         if (SkGraphics::GetOpenTypeSVGDecoderFactory()) {
             fLoadGlyphFlags |= FT_LOAD_COLOR;
         }
+#else
+#error "FT_CONFIG_OPTION_SVG not on"
 #endif
     } else if (FT_HAS_FIXED_SIZES(fFaceRec->fFace)) {
         fStrikeIndex = chooseBitmapStrike(fFaceRec->fFace.get(), scaleY);
diff --git a/src/3rdparty/chromium/third_party/skia/src/ports/SkScalerContext_win_dw.cpp b/src/3rdparty/chromium/third_party/skia/src/ports/SkScalerContext_win_dw.cpp
index 68b47443..808dfd5f 100644
--- a/src/3rdparty/chromium/third_party/skia/src/ports/SkScalerContext_win_dw.cpp
+++ b/src/3rdparty/chromium/third_party/skia/src/ports/SkScalerContext_win_dw.cpp
@@ -45,6 +45,8 @@
 #include "src/utils/win/SkHRESULT.h"
 #include "src/utils/win/SkTScopedComPtr.h"
 
+#include "modules/svg/include/SkSVGOpenTypeSVGDecoder.h"
+
 #include <dwrite.h>
 #include <dwrite_1.h>
 #include <dwrite_3.h>
@@ -2275,6 +2277,8 @@ bool SkScalerContext_DW::drawSVGImage(const SkGlyph& glyph, SkCanvas& canvas) {
         return false;
     }
 
+    if (!SkGraphics::GetOpenTypeSVGDecoderFactory())
+        SkGraphics::SetOpenTypeSVGDecoderFactory(SkSVGOpenTypeSVGDecoder::Make);
     SkGraphics::OpenTypeSVGDecoderFactory svgFactory = SkGraphics::GetOpenTypeSVGDecoderFactory();
     if (!svgFactory) {
         return false;
-- 
2.43.0

